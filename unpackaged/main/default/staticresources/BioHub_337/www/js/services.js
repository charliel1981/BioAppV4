/*! BioHub - v3.3.7 - 2019-04-18 11:36:38*/
/* Copyright 2019 MobileCaddy Ltd */
angular.module("underscore",[]).factory("_",function(){return window._}),angular.module("devUtils",[]).factory("devUtils",function(){return mobileCaddy.require("mobileCaddy/devUtils")}),angular.module("vsnUtils",[]).factory("vsnUtils",function(){return mobileCaddy.require("mobileCaddy/vsnUtils")}),angular.module("smartStoreUtils",[]).factory("smartStoreUtils",function(){return mobileCaddy.require("mobileCaddy/smartStoreUtils")}),angular.module("syncRefresh",[]).factory("syncRefresh",function(){return mobileCaddy.require("mobileCaddy/syncRefresh")}),angular.module("logger",[]).factory("logger",function(){return mobileCaddy.require("mobileCaddy/logger")}),angular.module("appDataUtils",[]).factory("appDataUtils",function(){return mobileCaddy.require("mobileCaddy/appDataUtils")}),angular.module("starter.services",["underscore","devUtils","vsnUtils","smartStoreUtils","syncRefresh","appDataUtils","logger"]),function(){"use strict";function AnalyticsService(devUtils,logger){function incrementKey(key){return new Promise(function(resolve,reject){var mappedKey=keyMap[key.toLowerCase()];mappedKey?devUtils.analInc(mappedKey).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("AnalyticsService.incrementKey error: "+angular.toJson(resObject)),reject(resObject)}):(logger.log("AnalyticsService.incrementKey - key not mapped: "+key),resolve(0))})}var keyMap={home:"1","home-order-form":"2","home-request":"3","home-stimulan":"4","home-toi":"5","home-elearn":"6","home-outbox":"7","new-account":"8","new-account-start":"9","new-account-history":"10","order-form":"11","order-form-scan":"12","order-form-manual":"13","order-form-history":"14",request:"15","request-standardstart":"16","request-urgentstart":"17","request-history":"18",stimulan:"19",apps:"20","key-ben":"21",hip:"22",knee:"23",foot:"24",trauma:"25",faq:"26",map:"27",genex:"28","genex-apps":"29","genex-key-ben":"30","genex-cases":"31",bio:"32",toi:"33","dist-hub":"34","e-learn":"35",lead:"36","lead-new":"37","lead-new-photo":"38","lead-history":"39","contact-us":"40",settings:"41",tutorial:"42",terms:"43","app-settings":"44",outbox:"45",sync:"46","order-form-submit":"47","order-form-cancel":"48","lead-capture-submit":"49","lead-capture-cancel":"50","new-account-submit":"51","new-account-cancel":"52","new-request-submit":"53","new-request-cancel":"54"};return{incrementKey:incrementKey}}angular.module("starter.services").factory("AnalyticsService",AnalyticsService),AnalyticsService.$inject=["devUtils","logger"]}(),function(){"use strict";function AppRunStatusService($ionicPopup,$ionicLoading,devUtils,vsnUtils,SyncService,logger){function resume(){return devUtils.dirtyTables().then(function(tables){logger.log("on resume: dirtyTables check"),tables&&0===tables.length?(logger.log("on resume: calling upgradeAvailable"),vsnUtils.upgradeAvailable().then(function(res){if(logger.log("on resume: upgradeAvailable? "+res),res){var notificationTimeout=3e5,prevUpNotification=localStorage.getItem("prevUpNotification"),timeNow=Date.now();if(null===prevUpNotification&&(prevUpNotification=0),parseInt(prevUpNotification)<timeNow-notificationTimeout){var confirmPopup=$ionicPopup.confirm({title:"Upgrade available",template:"Would you like to upgrade now?",cancelText:"Not just now",okText:"Yes"});confirmPopup.then(function(res){res?($ionicLoading.show({duration:3e4,delay:400,maxWidth:600,noBackdrop:!0,template:'<h1>Upgrade app...</h1><p id="app-upgrade-msg" class="item-icon-left">Upgrading...<ion-spinner/></p>'}),localStorage.removeItem("prevUpNotification"),logger.log("on resume: calling upgradeIfAvailable"),vsnUtils.upgradeIfAvailable().then(function(res){logger.log("on resume: upgradeIfAvailable res = "+res),res||($ionicLoading.hide(),$scope.data={},$ionicPopup.show({title:"Upgrade",subTitle:"The upgrade could not take place due to sync in progress. Please try again later.",scope:$scope,buttons:[{text:"OK",type:"button-positive",onTap:function(e){return!0}}]}))})["catch"](function(e){logger.error("resume "+JSON.stringify(e)),$ionicLoading.hide()})):localStorage.setItem("prevUpNotification",timeNow)})}}})):(logger.log("on resume: dirtyTables found"),SyncService.syncTables(["DOF__ap","DOF_Item__ap","Mobile_Dynamic__ap","Mobile_Log__mc"]))}),!0}return{statusEvent:function(status){logger.log("AppRunStatusService status "+status),"resume"==status&&resume()}}}angular.module("starter.services").factory("AppRunStatusService",AppRunStatusService),AppRunStatusService.$inject=["$ionicPopup","$ionicLoading","devUtils","vsnUtils","SyncService","logger"]}(),function(){"use strict";function AppSoupService(devUtils,logger){function getCurrentValue(name){return new Promise(function(resolve,reject){devUtils.readRecords("appSoup",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.Name==name?!0:!1}).value();resolve(records.length>0?records[0].CurrentValue:"")})["catch"](function(resObject){logger.error("getCurrentValue "+angular.toJson(resObject)),reject(resObject)})})}return{getCurrentValue:getCurrentValue}}angular.module("starter.services").factory("AppSoupService",AppSoupService),AppSoupService.$inject=["devUtils","logger"]}(),function(){"use strict";function CameraService($q){function getPicture(menuItem){var q=$q.defer();return navigator.camera.getPicture(function(result){q.resolve(result)},function(err){q.reject(err)},{quality:50,targetWidth:480,targetHeight:480,encodingType:navigator.camera.EncodingType.JPEG,destinationType:navigator.camera.DestinationType.DATA_URL}),q.promise}return{getPicture:getPicture}}angular.module("starter.services").factory("CameraService",CameraService),CameraService.$inject=["$q"]}(),function(){"use strict";function ContentItemService(devUtils,logger){function getContentItems(menuItem){return new Promise(function(resolve,reject){devUtils.readRecords("Content_Item__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.Menu_Item__c==menuItem?!0:!1}).sortBy("Order__c").value();resolve(records)})["catch"](function(resObject){logger.error("getContentItems "+angular.toJson(resObject)),reject(resObject)})})}return{getContentItems:getContentItems}}angular.module("starter.services").factory("ContentItemService",ContentItemService),ContentItemService.$inject=["devUtils","logger"]}(),function(){"use strict";function DeployService($rootScope,$q,$timeout,$http){function checkVsn(minMCPackVsn){return new Promise(function(resolve,reject){var appConfig,deviceAppName,deployServiceVsn,codeFlowVersion,codeFlowUtilsVersion;getDetails().then(function(res){return appConfig=res,appConfig.sf_mobile_application&&""!==appConfig.sf_mobile_application?getDeviceAppName():Promise.reject("No sf_mobile_application specified in package.json. This needs to match the value as specified on SFDC")}).then(function(res){return deviceAppName=res,getDeployServiceVersion()}).then(function(res){return deployServiceVsn=res,getCodeFlowVersion()}).then(function(res){return codeFlowVersion=res,getCodeFlowUtilsVersion()}).then(function(res){codeFlowUtilsVersion=res;var options=JSON.stringify({"function":"versionInfo",mc_utils_resource:appConfig.mc_utils_resource,sf_mobile_application:appConfig.sf_mobile_application,targeted_dv:appConfig.sf_app_vsn,mobilecaddy_codeflow_vsn:codeFlowVersion,mobilecaddy_codeflow_utils_vsn:codeFlowUtilsVersion,deploy_service_vsn:deployServiceVsn,device_app_name:deviceAppName});force.request({method:"POST",path:"/services/apexrest/mobilecaddy1/PlatformDevUtilsR001",contentType:"application/json",data:{startPageControllerVersion:"001",jsonParams:options}},function(response){var respJson=JSON.parse(response);"success"==respJson.errorMessage?compareVersions(respJson.packageVersion,minMCPackVsn)>=0?resolve():reject({message:"Version of MobileCaddy on SFDC needs to be min version "+minMCPackVsn+".\nCurrently running "+respJson.packageVersion+".\nPlease upgrade.",type:"error"}):(48==respJson.errorNo?(respJson.message="Sorry, looks like you have not enabled a Remote Site on your destination org. Please see http://developer.mobilecaddy.net/docs/adding-remote-site/ for details",respJson.type="error"):(respJson.message=respJson.errorMessage,respJson.type="error"),console.error(respJson),reject(respJson))},function(error){console.error(error),reject("NOT_FOUND"==error[0].errorCode?{message:"Version of MobileCaddy on SFDC needs to be min version "+minMCPackVsn+".\nPlease upgrade.",type:"error"}:{message:"Deploy failed. See console for details.",type:"error"})})})["catch"](function(e){console.error(e),reject({message:JSON.stringify(e),type:"error"})})})}function compareVersions(v1,v2,options){function isValidPart(x){return(lexicographical?/^\d+[A-Za-z]*$/:/^\d+$/).test(x)}var lexicographical=options&&options.lexicographical,zeroExtend=options&&options.zeroExtend,v1parts=v1.split("."),v2parts=v2.split(".");if(!v1parts.every(isValidPart)||!v2parts.every(isValidPart))return NaN;if(zeroExtend){for(;v1parts.length<v2parts.length;)v1parts.push("0");for(;v2parts.length<v1parts.length;)v2parts.push("0")}lexicographical||(v1parts=v1parts.map(Number),v2parts=v2parts.map(Number));for(var i=0;i<v1parts.length;++i){if(v2parts.length==i)return 1;if(v1parts[i]!=v2parts[i])return v1parts[i]>v2parts[i]?1:-1}return v1parts.length!=v2parts.length?-1:0}function _arrayBufferToBase64(buffer){for(var binary="",bytes=new Uint8Array(buffer),len=bytes.byteLength,i=0;len>i;i++)binary+=String.fromCharCode(bytes[i]);return window.btoa(binary)}function doesBundleExist(appConfig){return new Promise(function(resolve,reject){var dataName=appConfig.sf_app_name+"_"+appConfig.sf_app_vsn;force.request({path:"/services/data/"+apiVersion+"/tooling/query/?q=select Id, Name, Description, LastModifiedDate from StaticResource WHERE Name='"+dataName+"' LIMIT 1"},function(response){console.debug("response",response),resolve(response)},function(error){console.error("Failed to check if app bundle already existed on platform"),reject({message:"App bundle upload failed. See console for details.",type:"error"})})})}function getDetails(){return new Promise(function(resolve,reject){$timeout(function(){$http.get("../package.json").success(function(appConfig){appConfig.sf_app_vsn=appConfig.version.replace(/\./g,""),resolve(appConfig)})["catch"](function(err){console.error(err)})},30)})}function getDeviceAppName(){return new Promise(function(resolve,reject){$timeout(function(){$http.get("index.tpl.html").success(function(indexBody){var lines=indexBody.split("\n"),buildName="";lines.forEach(function(line,i){line.includes("mobileCaddy.buildName")&&(buildName=line.split("=")[1].replace(/\W/g,""))}),resolve(buildName)})["catch"](function(err){console.error(err)})},30)})}function getDeployServiceVersion(){return new Promise(function(resolve,reject){$timeout(function(){$http.get("js/services/deploy.service.js").success(function(indexBody){var lines=indexBody.split("\n");lines.forEach(function(line,i){if(line.includes("* deploy_service_vsn:")){var deployServiceVersion=line.split(":")[1];resolve(deployServiceVersion)}})})["catch"](function(err){console.error(err)})},30)})}function getCodeFlowVersion(){return getVersionFromPackageJson("../node_modules/mobilecaddy-codeflow/package.json")}function getCodeFlowUtilsVersion(){return getVersionFromPackageJson("../node_modules/mobilecaddy-utils/package.json")}function getVersionFromPackageJson(path){return new Promise(function(resolve,reject){$timeout(function(){$http.get(path).success(function(packageJson){resolve(packageJson.version)})["catch"](function(err){console.error(err)})},30)})}function encodeAppBundle(appConfig){return new Promise(function(resolve,reject){JSZipUtils.getBinaryContent("../"+appConfig.name+"-"+appConfig.version+".zip",function(err,data){err&&(console.error(err),reject(err));var zipFileLoaded=new JSZip(data);$rootScope.deployFiles=zipFileLoaded.files,resolve(_arrayBufferToBase64(data))})})}function uploadAppBundle(appConfig,myBody){return new Promise(function(resolve,reject){var dataName=appConfig.sf_app_name+"_"+appConfig.sf_app_vsn;doesBundleExist(appConfig).then(function(response){if(response.records.length>0){console.debug("resource exists... patching existing");var existingSR=response.records[0];force.request({method:"PATCH",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/StaticResource/"+existingSR.Id+"/",data:{Body:myBody}},function(response){console.debug("response",response),resolve("Existing app bundle updated")},function(error){console.error("Failed to check if app bundle already existed on platform"),reject({message:"App bundle upload failed. See console for details.",type:"error"})})}else force.request({method:"POST",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/StaticResource/",data:{Name:dataName,Description:"App Bundle - auto-uploaded by MobileCaddy delopyment tooling",ContentType:"application/zip",Body:myBody,CacheControl:"Public"}},function(response){console.debug("response",response),resolve("App bundle uploaded")},function(error){console.error(error),reject({message:"App bundle upload failed. See console for details.",type:"error"})})})})}function uploadCachePage(appConfig){return new Promise(function(resolve,reject){$timeout(function(){$http.get("../apex-templates/cachepage-template.apex").success(function(data){var dataName=appConfig.sf_app_name+"Cache_"+appConfig.sf_app_vsn,cacheEntriesStr="";_.each($rootScope.deployFiles,function(el){el.dir||(cacheEntriesStr+="{!URLFOR($Resource."+appConfig.sf_app_name+"_"+appConfig.sf_app_vsn+", '"+el.name+"')}\n")});var dataParsed=data.replace(/MC_UTILS_RESOURCE/g,appConfig.mc_utils_resource);dataParsed=dataParsed.replace(/MY_APP_FILE_LIST/g,cacheEntriesStr),delete $rootScope.deployFiles;var pageOptions=JSON.stringify({"function":"createApexPage",pageApiName:dataName,pageLabel:dataName,pageContents:dataParsed,apiVersion:apiVersionInt,pageDescription:"MobileCaddy CachePage"});force.request({method:"POST",path:"/services/apexrest/mobilecaddy1/PlatformDevUtilsR001",contentType:"application/json",data:{startPageControllerVersion:"001",jsonParams:pageOptions}},function(response){var respJson=JSON.parse(response);"success"==respJson.errorMessage?resolve("Cache manifest uploaded"):(respJson.message=respJson.errorMessage,respJson.type="error",console.error(respJson),reject(respJson))},function(error){console.error(error),reject({message:"Start page upload failed. See console for details.",type:"error"})})})},30)})}function uploadStartPage(appConfig){return new Promise(function(resolve,reject){$timeout(function(){$http.get("../apex-templates/startpage-template.apex").success(function(data){var dataName=appConfig.sf_app_name+"_"+appConfig.sf_app_vsn,dataParsed=data.replace(/MC_UTILS_RESOURCE/g,appConfig.mc_utils_resource);dataParsed=dataParsed.replace(/MY_APP_RESOURCE/g,appConfig.sf_app_name+"_"+appConfig.sf_app_vsn),dataParsed=dataParsed.replace(/MY_APP_CACHE_RESOURCE/g,appConfig.sf_app_name+"Cache_"+appConfig.sf_app_vsn);var pageOptions=JSON.stringify({"function":"createApexPage",pageApiName:dataName,pageLabel:dataName,pageContents:dataParsed,apiVersion:apiVersionInt,pageDescription:"MobileCaddy StartPage"});force.request({method:"POST",path:"/services/apexrest/mobilecaddy1/PlatformDevUtilsR001",contentType:"application/json",data:{startPageControllerVersion:"001",jsonParams:pageOptions}},function(response){var respJson=JSON.parse(response);"success"==respJson.errorMessage?resolve("Start page uploaded"):(respJson.message=respJson.errorMessage,respJson.type="error",console.error(respJson),reject(respJson))},function(error){console.error(error),reject({message:"Start page upload failed. See console for details.",type:"error"})})})},30)})}var apiVersionInt=32,apiVersion="v32.0";return{checkVsn:checkVsn,getDetails:getDetails,_compareVersions:compareVersions,deployBunlde:function(appConfig){return encodeAppBundle(appConfig).then(function(myBody,bundleFiles){return uploadAppBundle(appConfig,myBody)})},uploadCachePage:uploadCachePage,uploadStartPage:uploadStartPage,srDetails:function(){return encodeAppBundle().then(function(myBody){return uploadAppBundle(myBody)}).then(function(res){return uploadStartPage()})}}}angular.module("starter.services").factory("DeployService",DeployService),DeployService.$inject=["$rootScope","$q","$timeout","$http"]}(),function(){"use strict";function DevService($rootScope,$q,_,devUtils,appDataUtils,smartStoreUtils,logger){function authenticate(_0x4c81x2,_0x4c81x3){return new Promise(function(resolve,reject){var _0x4c81x4=_0x47ed[0],_0x4c81x5=0;appDataUtils[_0x47ed[11]](_0x47ed[10])[_0x47ed[9]](function(_0x4c81x7){_0x4c81x7[_0x47ed[3]]>15&&(_0x4c81x7=_0x4c81x7[_0x47ed[4]](0,15));for(var _0x4c81x8=0;_0x4c81x8<_0x4c81x7[_0x47ed[3]];_0x4c81x8++)_0x4c81x5+=_0x4c81x7[_0x47ed[5]](_0x4c81x8);_0x4c81x5+=parseInt(_0x4c81x2);var _0x4c81x9=new Date,_0x4c81xa=_0x47ed[0];if(_0x4c81xa+=_0x4c81x9[_0x47ed[6]](),_0x4c81xa+=_0x4c81x9[_0x47ed[7]](),_0x4c81x5+=parseInt(_0x4c81xa),_0x4c81x4=_0x47ed[0]+_0x4c81x5,_0x4c81x4[_0x47ed[3]]<4)for(var _0x4c81xb=_0x4c81x4[_0x47ed[3]]-4,_0x4c81xc=0;_0x4c81xb>_0x4c81xc;_0x4c81xc++)_0x4c81x4=_0x47ed[8]+_0x4c81x4;_0x4c81x4[_0x47ed[3]]>4&&(_0x4c81x4=_0x4c81x4[_0x47ed[4]](0,4)),resolve(_0x4c81x4===_0x4c81x3?!0:!1)})[_0x47ed[2]](function(_0x4c81x6){logger[_0x47ed[1]](logTag,_0x4c81x6),reject(_0x4c81x6)})})}function getTables(){var deferred=$q.defer(),tables=[];return tables.push({Name:"syncLib_system_data"}),tables.push({Name:"appSoup"}),tables.push({Name:"cacheSoup"}),tables.push({Name:"recsToSync"}),smartStoreUtils.listMobileTables(smartStoreUtils.ALPHA,function(tableNames){return $j.each(tableNames,function(i,tableName){tables.push({Name:tableName}),smartStoreUtils.getTableDefnColumnValue(tableName,"Snapshot Data Required",function(snapshotValue){return"Yes"==snapshotValue&&tables.push({Name:"SnapShot_"+tableName}),$rootScope.$apply(function(){tables=tables}),tables},function(resObject){console.error("MC : Error from listMobileTables -> "+angular.toJson(resObject)),deferred.reject("error")})}),$rootScope.$apply(function(){deferred.resolve(tables)}),deferred.promise},function(e){console.log("MC: error from listMobileTables -> "+angular.toJson(e)),deferred.reject(e)}),deferred.promise}function isId(Val){var patt=/^[a-zA-Z0-9]{18}$/;return patt.test(Val)}function getRecords(tableName,refreshFlag){var deferred=$q.defer(),myTableRecs=[];return devUtils.readRecords(tableName,[]).then(function(resObject){console.log(tableName,resObject),$j.each(resObject.records,function(i,record){var tableRec=[];for(var fieldDef in record){var field={Name:fieldDef,Value:record[fieldDef],ID_flag:isId(record[fieldDef])};tableRec.push(field)}myTableRecs.push(tableRec)}),deferred.resolve(myTableRecs)})["catch"](function(resObject){console.error("MC : Error from devUtils.readRecords -> "+angular.toJson(resObject)),deferred.reject("error")}),deferred.promise}function getRecordForSoupEntryId(tableName,soupRecordId){return new Promise(function(resolve,reject){devUtils.readRecords(tableName,[]).then(function(resObject){var record=_.findWhere(resObject.records,{_soupEntryId:soupRecordId});resolve(record)})["catch"](function(resObject){reject(resObject)})})}function generateSupportPin(){var supportPin=Math.floor(10*Math.random()).toString()+Math.floor(10*Math.random()).toString()+Math.floor(10*Math.random()).toString()+Math.floor(10*Math.random()).toString();return supportPin}function insertRecordUsingSmartStoreUtils(tableName,rec){return new Promise(function(resolve,reject){smartStoreUtils.insertRecords(tableName,[rec],function(res){resolve(res)},function(err){reject(err)})})}function insertMobileLog(recs){return new Promise(function(resolve,reject){for(var remainingData=JSON.stringify(recs),dataToInsert=[];remainingData.length>0;)dataToInsert.push(remainingData.substring(0,32767)),remainingData=remainingData.substring(32767);var sequence=Promise.resolve();dataToInsert.forEach(function(data){sequence=sequence.then(function(){var mobileLog={};return mobileLog.Name="TMP-"+(new Date).valueOf(),mobileLog.mobilecaddy1__Error_Text__c=data,mobileLog.SystemModstamp=(new Date).getTime(),insertRecordUsingSmartStoreUtils("Mobile_Log__mc",mobileLog)}).then(function(resObject){resolve(resObject)})["catch"](function(res){reject(res)})})})}var logTag="app.DevService",_0x47ed=["","error","catch","length","substring","charCodeAt","getUTCDate","getUTCMonth","0","then","audId","getCurrentValueFromAppSoup"];return{authenticate:authenticate,allTables:getTables,allRecords:function(tableName,refreshFlag){var tableRecs=[];switch(refreshFlag){case!0:tableRecs=[],tableRecs=getRecords(tableName,!0);break;default:"undefined"==typeof tableRecs||tableRecs.length<1?(tableRecs=[],tableRecs=getRecords(tableName,!0)):(tableRecs=[],tableRecs=getRecords(tableName,!1))}return tableRecs},getRecordForSoupEntryId:getRecordForSoupEntryId,generateSupportPin:generateSupportPin,insertMobileLog:insertMobileLog}}angular.module("starter.services").factory("DevService",DevService),DevService.$inject=["$rootScope","$q","_","devUtils","appDataUtils","smartStoreUtils","logger"]}(),function(){"use strict";function DiagnosticService(devUtils,logger){function getCachedFlag(){return new Promise(function(resolve,reject){devUtils.readRecords("cacheSoup").then(function(result){resolve(_.findWhere(result.records,{Description:"cached"})?"True":"False")})["catch"](function(e){logger.error(e),reject(e)})})}function getRecentLogs(count){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Log__mc").then(function(result){var latestLogs=_.chain(result.records).sortBy("_soupLastModifiedDate").reverse().first(count).value();latestLogs.forEach(function(logObj){logObj.errorObj=[];try{var textJson=JSON.parse(logObj.mobilecaddy1__Error_Text__c);for(var prop in textJson)logObj.errorObj.push(JSON.stringify(textJson[prop]));logObj.mobilecaddy1__Error_Text__c=""}catch(e){}}),resolve(latestLogs)})["catch"](function(e){logger.error(e),reject(e)})})}function testVfRemote(){return new Promise(function(resolve,reject){try{Visualforce.remoting.Manager.invokeAction("mobilecaddy1.MobileCaddyStartPageController001_mc.heartBeat",function(result,event){resolve({result:result,event:event})},{escape:!1,timeout:3e4})}catch(e){reject(e)}})}return{getCachedFlag:getCachedFlag,getRecentLogs:getRecentLogs,testVfRemote:testVfRemote}}angular.module("starter.services").factory("DiagnosticService",DiagnosticService),DiagnosticService.$inject=["devUtils","logger"]}(),function(){"use strict";function LocalNotificationService($cordovaLocalNotification,$cordovaNetwork,devUtils,logger,SyncService){function cancelNotification(id){return new Promise(function(resolve,reject){id=id?id:lnDefaultId,"disabled"==getLocalNotificationState()?(logger.log("cancelNotification NotificationState disabled"),resolve()):(logger.log("cancelNotification",id),cordova&&cordova.plugins&&cordova.plugins.notification&&$cordovaLocalNotification.cancel(id).then(function(result){logger.log("localNotification cancelled if it existed",id,result),resolve(result)}))})}function setLocalNotification(id,secsTillNotify,msg){return new Promise(function(resolve,reject){"disabled"==getLocalNotificationState()?(logger.log("setLocalNotification NotificationState disabled"),resolve("ok")):(id=id?id:lnDefaultId,secsTillNotify=secsTillNotify?secsTillNotify:lnDefaultTimeout,msg=msg?msg:lnDefaultMsg,logger.log("setLocalNotification id",id,secsTillNotify,msg),devUtils.dirtyTables().then(function(tables){if(tables&&0===tables.length&&id==lnDefaultId)logger.log("setLocalNotification no dirty tables",id),resolve();else if(cordova&&cordova.plugins&&cordova.plugins.notification){var alarmTime=new Date;alarmTime.setSeconds(alarmTime.getSeconds()+secsTillNotify),logger.log("setLocalNotification alarmTime",alarmTime),$cordovaLocalNotification.isScheduled(id).then(function(isScheduled){if(logger.log("setLocalNotification isScheduled",isScheduled),isScheduled)$cordovaLocalNotification.update({id:id,at:alarmTime}).then(function(result){logger.log("localNotification updated",id,result),resolve(result)});else{var args={id:id,at:alarmTime,text:msg,sound:null};"Android"==device.platform&&(args.ongoing=!0,args.smallIcon="res://icon"),$cordovaLocalNotification.schedule(args).then(function(result){logger.log("localNotification has been set",id,result),resolve(result)})}})["catch"](function(err){logger.error("setLocalNotification",JSON.stringify(err)),reject(err)})}else logger.log("setLocalNotification no cordova plugin"),resolve()}))})}function handleLocalNotification(id,state){return new Promise(function(resolve,reject){"disabled"==getLocalNotificationState()?(logger.log("handleLocalNotification NotificationState disabled"),resolve()):(logger.log("handleLocalNotification",id,state),cordova&&cordova.plugins&&cordova.plugins.notification&&id==lnDefaultId?($cordovaLocalNotification.cancel(id,function(){}),devUtils.dirtyTables().then(function(tables){if(tables&&0!==tables.length){var isOnline=$cordovaNetwork.isOnline();logger.log("handleLocalNotification isOnline",isOnline),isOnline?(localStorage.setItem("networkStatus","online"),resolve(),SyncService.syncTables(["Mobile_Refresh__ap","Content_Item__ap","Surgeon_in_Hospital__ap","DOF__ap","DOF_Item__ap","Mobile_Dynamic__ap","Mobile_Log__mc"])):(localStorage.setItem("networkStatus","offline"),setLocalNotification(id).then(function(result){resolve(result)})["catch"](function(e){reject(e)}))}else resolve()})):resolve())})}function handleLocalNotificationClick(id,state){return new Promise(function(resolve,reject){"disabled"==getLocalNotificationState()?(logger.log("handleLocalNotification NotificationState disabled"),resolve()):(logger.log("handleLocalNotification",id,state),cordova&&cordova.plugins&&cordova.plugins.notification&&id==lnDefaultId?($cordovaLocalNotification.cancel(id,function(){}),devUtils.dirtyTables().then(function(tables){if(tables&&0!==tables.length){var isOnline=$cordovaNetwork.isOnline();logger.log("handleLocalNotification isOnline",isOnline),isOnline?(localStorage.setItem("networkStatus","online"),resolve()):(localStorage.setItem("networkStatus","offline"),setLocalNotification(id).then(function(result){resolve(result)})["catch"](function(e){reject(e)}))}else resolve()})):resolve())})}function getLocalNotificationState(){var localNotificationState=localStorage.getItem("localNotificationState");return null===localNotificationState&&(localNotificationState="enabled",localStorage.setItem("localNotificationState",localNotificationState)),localNotificationState}function setLocalNotificationState(status){localStorage.setItem("localNotificationState",status)}var lnDefaultTimeout=600,lnDefaultId=100100,lnDefaultMsg="Unsynced records";return{cancelNotification:cancelNotification,setLocalNotification:setLocalNotification,handleLocalNotification:handleLocalNotification,handleLocalNotificationClick:handleLocalNotificationClick,getLocalNotificationState:getLocalNotificationState,setLocalNotificationState:setLocalNotificationState}}angular.module("starter.services").factory("LocalNotificationService",LocalNotificationService),LocalNotificationService.$inject=["$cordovaLocalNotification","$cordovaNetwork","devUtils","logger","SyncService"]}(),function(){"use strict";function MenuService(devUtils,$window,logger){function buildAndSetSideMenuJson(){return new Promise(function(resolve,reject){buildSideMenuJson().then(function(result){setSideMenuJson(result),resolve(result)})["catch"](function(e){reject(e)})})}function getSideMenuJson(){return new Promise(function(resolve,reject){resolve(JSON.parse(localStorage.getItem("sidemenu")))})}function setSideMenuJson(sideMenuJson){localStorage.setItem("sidemenu",JSON.stringify(sideMenuJson))}function buildSideMenuJson(){var resourcePath=$window.RESOURCE_ROOT+"images/";return new Promise(function(resolve,reject){getMenuItems().then(function(records){for(var mainMenuOption,stimulanMenuOption,stimulanSubMenuOption,settingsMenuOption,settingsSubMenuOption,genexMenuOption,genexSubMenuOption,menuOption,menuOptionName,sideMenuJson=[],stimulanSubMenu=[],settingsSubMenu=[],genexSubMenu=[],i=0;i<records.length;i++)menuOption=records[i].App_Menu_Option__c,menuOptionName=records[i].Name__c,stimulanSubMenuOption=null,settingsSubMenuOption=null,genexSubMenuOption=null,mainMenuOption=null,"apps"==menuOption?stimulanSubMenuOption={id:400,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"key-ben"==menuOption?stimulanSubMenuOption={id:410,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"hip"==menuOption?stimulanSubMenuOption={id:420,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"knee"==menuOption?stimulanSubMenuOption={id:430,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"foot"==menuOption?stimulanSubMenuOption={id:440,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"trauma"==menuOption?stimulanSubMenuOption={id:450,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"faq"==menuOption?stimulanSubMenuOption={id:460,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"map"==menuOption?stimulanSubMenuOption={id:470,name:menuOptionName,node:!0,parentid:40,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"tutorial"==menuOption?settingsSubMenuOption={id:900,name:menuOptionName,node:!0,parentid:90,path:"/tutorial",submenu:[]}:"terms"==menuOption?settingsSubMenuOption={id:910,name:menuOptionName,node:!0,parentid:90,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"mc-settings"==menuOption?settingsSubMenuOption={id:920,name:menuOptionName,node:!0,parentid:90,path:"/app/settings",submenu:[]}:"genex-apps"==menuOption?genexSubMenuOption={id:1010,name:menuOptionName,node:!0,parentid:45,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"genex-key-ben"==menuOption?genexSubMenuOption={id:1020,name:menuOptionName,node:!0,parentid:45,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"genex-hip"==menuOption?genexSubMenuOption={id:1030,name:menuOptionName,node:!0,parentid:45,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"genex-knee"==menuOption?genexSubMenuOption={id:1031,name:menuOptionName,node:!0,parentid:45,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"genex-foot"==menuOption&&(genexSubMenuOption={id:1032,name:menuOptionName,node:!0,parentid:45,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}),stimulanSubMenuOption&&stimulanSubMenu.push(stimulanSubMenuOption),settingsSubMenuOption&&settingsSubMenu.push(settingsSubMenuOption),genexSubMenuOption&&genexSubMenu.push(genexSubMenuOption),"home"==menuOption?mainMenuOption={id:10,name:menuOptionName,node:!0,parentid:0,href:"#/app/home",svg:resourcePath+"home-icon.SVG",submenu:[]}:"my-accounts"==menuOption?mainMenuOption={id:15,name:menuOptionName,node:!0,parentid:0,href:"#/app/myaccounts",svg:resourcePath+"new-account-icon.SVG",submenu:[]}:"new-account"==menuOption?mainMenuOption={id:17,name:menuOptionName,node:!0,parentid:0,href:"#/app/newaccount",svg:resourcePath+"new-account-icon.SVG",submenu:[]}:"order-form"==menuOption?mainMenuOption={id:20,name:menuOptionName,node:!0,parentid:0,href:"#/app/orderform",svg:resourcePath+"order-form-icon.SVG",submenu:[]}:"un-req"==menuOption?mainMenuOption={
id:30,name:menuOptionName,node:!0,parentid:0,href:"#/app/request",svg:resourcePath+"unsolicited-request-icon.SVG",submenu:[]}:"stimulan"==menuOption?(mainMenuOption={id:40,name:menuOptionName,node:!1,parentid:0,href:"#/app/home",svg:resourcePath+"stimulan-icon.SVG",submenu:[]},stimulanMenuOption=mainMenuOption):"genex"==menuOption?(mainMenuOption={id:45,name:menuOptionName,node:!1,parentid:0,href:"#/app/home",svg:resourcePath+"genex-icon.SVG",submenu:[]},genexMenuOption=mainMenuOption):"bio"==menuOption?mainMenuOption={id:50,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"biocomposites-icon.SVG",submenu:[]}:"toi"==menuOption?mainMenuOption={id:60,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"topics-of-interest-icon.SVG",submenu:[]}:"dist-hub"==menuOption?mainMenuOption={id:65,name:menuOptionName,node:!0,parentid:0,click:"vm.openDistHub()",svg:resourcePath+"distributor-hub-icon.SVG",submenu:[]}:"e-learn"==menuOption?mainMenuOption={id:70,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"e-learning-icon.SVG",submenu:[]}:"l-cap"==menuOption?mainMenuOption={id:80,name:menuOptionName,node:!0,parentid:0,href:"#/app/leadcapture",svg:resourcePath+"lead-capture-icon.SVG",submenu:[]}:"contact-us"==menuOption?mainMenuOption={id:85,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"contact-us-icon.SVG",submenu:[]}:"settings"==menuOption?(mainMenuOption={id:90,name:menuOptionName,node:!1,parentid:0,href:"#/app/home",svg:resourcePath+"settings-icon.SVG",submenu:[]},settingsMenuOption=mainMenuOption):"outbox"==menuOption?mainMenuOption={id:100,name:menuOptionName,node:!0,parentid:0,href:"#/app/outbox",svg:resourcePath+"outbox-icon.SVG",submenu:[]}:"sync"==menuOption&&(mainMenuOption={id:110,name:menuOptionName,node:!0,parentid:0,click:"vm.doRefreshAndSync()",svg:resourcePath+"sync-icon.SVG",submenu:[]}),mainMenuOption&&sideMenuJson.push(mainMenuOption);for(var x=0,len=sideMenuJson.length;len>x;x++)40===sideMenuJson[x].id&&(sideMenuJson[x].submenu=stimulanSubMenu),90===sideMenuJson[x].id&&(sideMenuJson[x].submenu=settingsSubMenu),45===sideMenuJson[x].id&&(sideMenuJson[x].submenu=genexSubMenu);resolve([sideMenuJson,stimulanMenuOption,settingsMenuOption,genexMenuOption])})["catch"](function(e){reject(e)})})}function getMenuItems(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Profile Menu Item"==el.RecordType_Name__c?!0:!1}).sortBy("Order__c").value();resolve(records)})["catch"](function(resObject){logger.error("getMenuItems "+angular.toJson(resObject)),reject(resObject)})})}return{getSideMenuJson:getSideMenuJson,buildAndSetSideMenuJson:buildAndSetSideMenuJson,setSideMenuJson:setSideMenuJson}}angular.module("starter.services").factory("MenuService",MenuService),MenuService.$inject=["devUtils","$window","logger"]}(),function(){"use strict";function MobileDynamicService(devUtils,logger){function insertRecord(record){return new Promise(function(resolve,reject){devUtils.insertRecord("Mobile_Dynamic__ap",record).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("insertRecord "+angular.toJson(resObject)),reject(resObject)})})}function getRecords(recordTypeId){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Dynamic__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.RecordTypeId==recordTypeId?!0:!1}).sortBy(function(e){return-e.Date_Entered__c}).value();resolve(records)})["catch"](function(resObject){logger.error("getRecords "+angular.toJson(resObject)),reject(resObject)})})}return{insertRecord:insertRecord,getRecords:getRecords}}angular.module("starter.services").factory("MobileDynamicService",MobileDynamicService),MobileDynamicService.$inject=["devUtils","logger"]}(),function(){"use strict";function NetworkService($rootScope,SyncService,logger){function networkEvent(status){var pastStatus=localStorage.getItem("networkStatus");return pastStatus!=status&&$rootScope.$emit("networkState",{state:status}),localStorage.setItem("networkStatus",status),logger.log("NetworkService "+status),!0}function getNetworkStatus(){try{var bootstrap=cordova.require("com.salesforce.util.bootstrap");return console.log("bootstrap",bootstrap),bootstrap.deviceIsOnline()?(setNetworkStatus("online"),"online"):(setNetworkStatus("offline"),"offline")}catch(e){return logger.error("Error calling bootstrap.deviceIsOnline",e),localStorage.getItem("networkStatus")}}function setNetworkStatus(status){localStorage.setItem("networkStatus",status)}function updateStateFromDevice(){try{var bootstrap=cordova.require("com.salesforce.util.bootstrap");console.log("bootstrap",bootstrap),setNetworkStatus(bootstrap.deviceIsOnline()?"online":"offline")}catch(e){console.log("bootstrap")}}return{networkEvent:networkEvent,getNetworkStatus:getNetworkStatus,setNetworkStatus:setNetworkStatus,updateStateFromDevice:updateStateFromDevice}}angular.module("starter.services").factory("NetworkService",NetworkService),NetworkService.$inject=["$rootScope","SyncService","logger"]}(),function(){"use strict";function OrderFormService(devUtils,logger){function getProducts(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Product"==el.RecordType_Name__c?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getProducts "+angular.toJson(resObject)),reject(resObject)})})}function getLotNumbers(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Lot Numbers"==el.RecordType_Name__c?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getLotNumbers "+angular.toJson(resObject)),reject(resObject)})})}function getHospitals(){return new Promise(function(resolve,reject){devUtils.readRecords("Surgeon_in_Hospital__ap",[]).then(function(resObject){var records=_.chain(resObject.records).uniq("Hospital_Name__c").sortBy("Hospital_Name__c").value();resolve(records)})["catch"](function(resObject){logger.error("getHospitals "+angular.toJson(resObject)),reject(resObject)})})}function getSurgeons(){return new Promise(function(resolve,reject){devUtils.readRecords("Surgeon_in_Hospital__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return""!==el.Surgeon__c}).sortBy("First_Name__c").sortBy("Last_Name__c").value();resolve(records)})["catch"](function(resObject){logger.error("getSurgeons "+angular.toJson(resObject)),reject(resObject)})})}function insertOrderForm(record){return new Promise(function(resolve,reject){devUtils.insertRecord("DOF__ap",record).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("insertOrderForm "+angular.toJson(resObject)),reject(resObject)})})}function insertOrderFormItems(records){return new Promise(function(resolve,reject){devUtils.insertRecords("DOF_Item__ap",records).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("insertOrderFormItems "+angular.toJson(resObject)),reject(resObject)})})}function getOrders(){return new Promise(function(resolve,reject){devUtils.readRecords("DOF__ap",[]).then(function(resObject){var records=_.chain(resObject.records).sortBy(function(e){return-e.Date_Entered__c}).value();resolve(records)})["catch"](function(resObject){logger.error("getOrders "+angular.toJson(resObject)),reject(resObject)})})}function getOrderItems(){return new Promise(function(resolve,reject){devUtils.readRecords("DOF_Item__ap",[]).then(function(resObject){var records=_.chain(resObject.records).value();resolve(records)})["catch"](function(resObject){logger.error("getOrderItems "+angular.toJson(resObject)),reject(resObject)})})}function getSurgeonInHospital(surgeonId){return new Promise(function(resolve,reject){devUtils.readRecords("Surgeon_in_Hospital__ap",[]).then(function(resObject){var record=_.findWhere(resObject.records,{Surgeon__c:surgeonId});resolve(record)})["catch"](function(resObject){reject(resObject)})})}function getOrderItemsWithOrderId(orderId){return new Promise(function(resolve,reject){devUtils.readRecords("DOF_Item__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.DOF__c==orderId?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getOrderItems "+angular.toJson(resObject)),reject(resObject)})})}function getProductsForOrderItems(orderItems){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){for(var products=_.chain(resObject.records).filter(function(el){return"Product"==el.RecordType_Name__c?!0:!1}).value(),records=[],j=0;j<orderItems.length;j++)for(var k=0;k<products.length;k++)if(products[k].Id==orderItems[j].Product__c){records.push(products[k]);break}resolve(records)})["catch"](function(resObject){logger.error("getProductsForOrderItems "+angular.toJson(resObject)),reject(resObject)})})}function getOrderById(orderId){return new Promise(function(resolve,reject){devUtils.readRecords("DOF__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.Id==orderId||el.MC_Proxy_ID__c==orderId?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getOrderById "+angular.toJson(resObject)),reject(resObject)})})}return{getProducts:getProducts,getLotNumbers:getLotNumbers,getHospitals:getHospitals,getSurgeons:getSurgeons,insertOrderForm:insertOrderForm,insertOrderFormItems:insertOrderFormItems,getOrders:getOrders,getOrderItems:getOrderItems,getSurgeonInHospital:getSurgeonInHospital,getOrderItemsWithOrderId:getOrderItemsWithOrderId,getProductsForOrderItems:getProductsForOrderItems,getOrderById:getOrderById}}angular.module("starter.services").factory("OrderFormService",OrderFormService),OrderFormService.$inject=["devUtils","logger"]}(),function(){"use strict";function OutboxService(devUtils,logger){function getDirtyRecordsCount(){return new Promise(function(resolve,reject){getDirtyRecords().then(function(resObject){resolve(resObject.length)})["catch"](function(resObject){logger.error("getDirtyRecordsCount "+angular.toJson(resObject)),reject(resObject)})})}function getDirtyRecords(){return new Promise(function(resolve,reject){devUtils.readRecords("recsToSync",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"DOF__ap"==el.Mobile_Table_Name||"DOF_Item__ap"==el.Mobile_Table_Name||"Mobile_Dynamic__ap"==el.Mobile_Table_Name?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getDirtyRecords "+angular.toJson(resObject)),reject(resObject)})})}function getRecordForSoupEntryId(tableName,soupRecordId){return new Promise(function(resolve,reject){devUtils.readRecords(tableName,[]).then(function(resObject){var record=_.findWhere(resObject.records,{_soupEntryId:soupRecordId});resolve(record)})["catch"](function(resObject){reject(resObject)})})}return{getDirtyRecordsCount:getDirtyRecordsCount,getDirtyRecords:getDirtyRecords,getRecordForSoupEntryId:getRecordForSoupEntryId}}angular.module("starter.services").factory("OutboxService",OutboxService),OutboxService.$inject=["devUtils","logger"]}(),function(){"use strict";function RecentItemsService(){function getRecentSurgeons(surgeonsToValidate){return new Promise(function(resolve,reject){getRecentItems(recentSurgeonsKey).then(function(recentSurgeons){checkRecentSurgeonsAreStillValid(surgeonsToValidate,recentSurgeons).then(function(validatedSurgeons){resolve(validatedSurgeons)})})})}function getRecentHospitals(hospitalsToValidate){return new Promise(function(resolve,reject){getRecentItems(recentHospitalsKey).then(function(recentHospitals){checkRecentHospitalsAreStillValid(hospitalsToValidate,recentHospitals).then(function(validatedHospitals){resolve(validatedHospitals)})})})}function getRecentItems(type){return new Promise(function(resolve,reject){var recentItems=JSON.parse(localStorage.getItem(type));resolve(null===recentItems?[]:recentItems)})}function setRecentItems(type,recentItems){return new Promise(function(resolve,reject){localStorage.setItem(type,JSON.stringify(recentItems)),resolve()})}function addRecentSurgeon(surgeon){return addRecentItem(recentSurgeonsKey,surgeon)}function addRecentHospital(hospital){return addRecentItem(recentHospitalsKey,hospital)}function addRecentItem(type,recentItem){return new Promise(function(resolve,reject){if(!recentItem)return resolve([]);var recentItems=JSON.parse(localStorage.getItem(type));null===recentItems&&(recentItems=[]);for(var itemFound=!1,i=0;i<recentItems.length;i++)recentItem.id&&recentItem.id===recentItems[i].id&&(itemFound=!0);itemFound||recentItems.unshift(recentItem),type===recentSurgeonsKey?recentItems.length>maximumRecentSurgeons&&(recentItems=recentItems.slice(0,maximumRecentSurgeons)):type===recentHospitalsKey?recentItems.length>maximumRecentHospitals&&(recentItems=recentItems.slice(0,maximumRecentHospitals)):recentItems=recentItems.slice(0,10),localStorage.setItem(type,JSON.stringify(recentItems)),resolve(recentItems)})}function checkRecentHospitalsAreStillValid(hospitals,recentHospitals){return new Promise(function(resolve,reject){for(var matchedRecentItems=[],i=0;i<recentHospitals.length;i++)for(var j=0;j<hospitals.length;j++)if(hospitals[j].id===recentHospitals[i].id){matchedRecentItems.push(recentHospitals[i]);break}matchedRecentItems.length!==recentHospitals.length&&(recentHospitals=matchedRecentItems,setRecentItems(recentHospitalsKey,matchedRecentItems)),resolve(recentHospitals)})}function checkRecentSurgeonsAreStillValid(surgeons,recentSurgeons){return new Promise(function(resolve,reject){for(var matchedRecentItems=[],i=0;i<recentSurgeons.length;i++)for(var j=0;j<surgeons.length;j++)if(surgeons[j].id==recentSurgeons[i].id){matchedRecentItems.push(recentSurgeons[i]);break}matchedRecentItems.length!==recentSurgeons.length&&(recentSurgeons=matchedRecentItems,setRecentItems(recentSurgeonsKey,matchedRecentItems)),resolve(recentSurgeons)})}return{getRecentHospitals:getRecentHospitals,getRecentSurgeons:getRecentSurgeons,getRecentItems:getRecentItems,addRecentItem:addRecentItem,addRecentSurgeon:addRecentSurgeon,addRecentHospital:addRecentHospital}}angular.module("starter.services").factory("RecentItemsService",RecentItemsService);var maximumRecentHospitals=7,maximumRecentSurgeons=40,recentHospitalsKey="recentHospitals",recentSurgeonsKey="recentSurgeons"}(),function(){"use strict";function RecordTypeService(devUtils,logger){function readAndSetRecordTypes(){return new Promise(function(resolve,reject){readRecordTypes().then(function(result){setRecordTypes(result),resolve(result)})["catch"](function(e){reject(e)})})}function getRecordTypeId(recordTypeName,recordTypeObject){return new Promise(function(resolve,reject){var recordTypes=JSON.parse(localStorage.getItem("recordtypes"));if(null===recordTypes)resolve("");else{for(var recordTypeId,i=0;i<recordTypes.length;i++)recordTypes[i].name==recordTypeName&&recordTypes[i].object==recordTypeObject&&(recordTypeId=recordTypes[i].id);resolve(recordTypeId)}})}function setRecordTypes(recordTypes){localStorage.setItem("recordtypes",JSON.stringify(recordTypes))}function readRecordTypes(){return new Promise(function(resolve,reject){getRecordTypes().then(function(records){for(var recordTypes=[],i=0;i<records.length;i++)recordTypes.push({name:records[i].Name__c,id:records[i].Record_Type_ID__c,object:records[i].Object_Reference__c});logger.log("recordTypes.length: "+recordTypes.length),resolve(recordTypes)})["catch"](function(e){reject(e)})})}function getRecordTypes(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Record Type Reference"==el.RecordType_Name__c?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getRecordTypes "+angular.toJson(resObject)),reject(resObject)})})}return{getRecordTypeId:getRecordTypeId,readAndSetRecordTypes:readAndSetRecordTypes}}angular.module("starter.services").factory("RecordTypeService",RecordTypeService),RecordTypeService.$inject=["devUtils","logger"]}(),function(){"use strict";function RecoveryService(SyncService,logger,smartStoreUtils,devUtils,syncRefresh,$ionicPopup){function dumpTables(){return new Promise(function(resolve,reject){var sequence=Promise.resolve(),dumpCount=0,totalTables=0;smartStoreUtils.listMobileTables(smartStoreUtils.NONE,function(tables){tables.push("recsToSync"),totalTables=tables.length,tables.forEach(function(tableName){sequence=sequence.then(function(){return dumpCount++,devUtils.readRecords(tableName,[]).then(function(records){return storeDumpedDataToRecoveryFolder("MobileTable_"+tableName,records)}).then(function(resObject){logger.log("("+dumpCount+" of "+totalTables+") Dump Result for "+tableName+": "+JSON.stringify(resObject)),dumpCount==totalTables&&resolve("Dump Completed for all tables.")})["catch"](function(err){reject(err)})})})},function(error){logger.error("Unable to get tables from smartstore."),reject(error)})})}function dumpLocalStorage(){return new Promise(function(resolve,reject){var dumpedLocalStorageData=[];for(var i in localStorage)dumpedLocalStorageData.push(localStorage[i]);storeDumpedDataToRecoveryFolder("LocalStorage",dumpedLocalStorageData).then(function(res){resolve(res)})["catch"](function(err){reject(err)})})}function dumpSoups(){return new Promise(function(resolve,reject){devUtils.readRecords("appSoup",[]).then(function(appSoupRecords){return storeDumpedDataToRecoveryFolder("AppSoup",appSoupRecords)}).then(function(resultOfAppSoupDump){return devUtils.readRecords("cacheSoup",[])}).then(function(cacheSoupRecords){return storeDumpedDataToRecoveryFolder("CacheSoup",cacheSoupRecords)}).then(function(resultOfCacheSoupDump){resolve("Completed dump of App Soup and Cache Soup: "+resultOfCacheSoupDump)})["catch"](function(resObject){reject("Error in dump Soups: "+resObject)})})}function storeDumpedDataToExternalAndroidRecoveryFolder(fileName,data){return new Promise(function(resolve,reject){logger.log("Beginning Android dump for: "+fileName),window.requestFileSystem(LocalFileSystem.PERSISTENT,0,function(fs){var date=new Date,dateString=date.toISOString();dateString=dateString.replace(/:/g,"");var fileNameWithDate="Recovered_"+fileName+"_"+dateString+".txt";window.resolveLocalFileSystemURL(cordova.file.externalRootDirectory,function(dir){logger.log("File system open: "+fs.name),dir.getDirectory("RecoveredData",{create:!0},function(recoveryFolder){recoveryFolder.getFile(fileNameWithDate,{create:!0,exclusive:!1},function(fileEntry){logger.log("fileEntry is file? "+fileEntry.isFile.toString()),fileEntry.createWriter(function(fileWriter){fileWriter.onerror=function(e){logger.log("Failed file read: "+e.toString()),reject(e.toString())};var dataObj=new Blob([JSON.stringify(data)],{type:"text/plain"});logger.log("Completed write for: "+fileName),fileWriter.write(dataObj),resolve("Completed dump of "+fileName)})},function(e){reject("Error for getFile: "+JSON.stringify(e))})})},function(e){reject("Error for resolveLocalFileSystemURL: "+JSON.stringify(e))})},function(e){reject("Error for requestFileSystem: "+JSON.stringify(e))})})}function storeDumpedDataToRecoveryFolder(fileName,data){return logger.log("Attempting to dump: "+fileName),"Android"===device.platform?storeDumpedDataToExternalAndroidRecoveryFolder(fileName,data):new Promise(function(resolve,reject){logger.log("Beginning iOS dump for: "+fileName),window.requestFileSystem(LocalFileSystem.PERSISTENT,0,function(fs){var date=new Date,dateString=date.toISOString();dateString=dateString.replace(/:/g,"");var fileNameWithDate="Recovered_"+fileName+"_"+dateString+".txt";logger.log("File system open: "+fs.name),fs.root.getDirectory("RecoveredData",{create:!0},function(recoveryFolder){recoveryFolder.getFile(fileNameWithDate,{create:!0,exclusive:!1},function(fileEntry){logger.log("fileEntry is file? "+fileEntry.isFile.toString()),fileEntry.createWriter(function(fileWriter){fileWriter.onerror=function(e){logger.error("Failed file read: "+e.toString()),reject("Failed file read: "+e.toString())};var dataObj=new Blob([JSON.stringify(data)],{type:"text/plain"});fileWriter.write(dataObj),logger.log("Write completed: "+fileName),resolve("Recovery Completed: "+fileName)})},function(e){reject("Error for getFile: "+JSON.stringify(e))})},function(e){reject("Error for getDirectory: "+JSON.stringify(e))})},function(e){reject("Error for requestFileSystem: "+JSON.stringify(e))})})}return{forceSync:function(){return new Promise(function(resolve,reject){var success=(Promise.resolve(),function(tablesToSync){logger.log("Built tables for forceSync: "+JSON.stringify(tablesToSync));var syncCount=0,totalTables=tablesToSync.length,sequence=Promise.resolve();tablesToSync.forEach(function(table){sequence=sequence.then(function(){return syncCount++,syncRefresh.m2pRecoveryUpdateMobileTable(table)}).then(function(resObject){logger.log("("+syncCount+" of "+totalTables+") Sync Result for "+table+": "+JSON.stringify(resObject)),syncCount==totalTables&&(logger.log("Force Sync completed."),resolve())})["catch"](function(res){logger.error("Caught error in force sync: "+res),reject(error)})})}),error=function(error){reject(error),logger.error("Error getting tables: "+JSON.stringify(error))};smartStoreUtils.listMobileTables(smartStoreUtils.ALPHA,success,error)})},recoverAllData:function(){return new Promise(function(resolve,reject){dumpLocalStorage().then(function(res){return dumpSoups()}).then(function(res){return dumpTables()}).then(function(res){resolve(),logger.log("Completed Recovery: "+res)})["catch"](function(err){reject(err),logger.error("Error in recovery: "+err)})})},returnAllTableData:function(){return new Promise(function(resolve,reject){var tablesData={};devUtils.readRecords("recsToSync",[]).then(function(recsToSyncRecords){tablesData.recsToSync=recsToSyncRecords,smartStoreUtils.listMobileTables(smartStoreUtils.NONE,function(tables){tables.forEach(function(tableName){devUtils.readRecords(tableName,[]).then(function(records){tablesData[tableName]=records,tableName===tables[tables.length-1]&&resolve(tablesData)})["catch"](function(resObject){logger.error("Error getting table data for viewer: "+JSON.stringify(resObject))})})},function(error){logger.error("Unable to get tables from smartstore. "+error)})})["catch"](function(resObject){logger.error("Error getting recsToSync data for viewer: "+JSON.stringify(resObject))})})},returnAllLocalStorageData:function(){return new Promise(function(resolve,reject){var dumpedLocalStorageData=[];for(var i in localStorage)dumpedLocalStorageData.push(localStorage[i]);resolve(dumpedLocalStorageData)})},returnAllSoupsData:function(){return new Promise(function(resolve,reject){var data={};devUtils.readRecords("appSoup",[]).then(function(records){data.appSoupData=records,devUtils.readRecords("cacheSoup",[]).then(function(records){data.cacheSoupData=records,resolve(data)})["catch"](function(resObject){logger.error("Error getting cacheSoup data for viewer: "+JSON.stringify(resObject))})})["catch"](function(resObject){logger.error("Error getting appSoup data for viewer: "+JSON.stringify(resObject))})})}}}angular.module("starter.services").factory("RecoveryService",RecoveryService),RecoveryService.$inject=["SyncService","logger","smartStoreUtils","devUtils","syncRefresh","$ionicPopup"]}(),function(){"use strict";function SyncService($rootScope,devUtils){function initialSync(tablesToSync){return new Promise(function(resolve,reject){setSyncState("syncing"),devUtils.initialSync(tablesToSync).then(function(res){setSyncState("complete"),_.every(_.values(res),function(table){return 100400===table.status})&&($rootScope.$emit("syncTables",{result:"InitialLoadComplete"}),resolve())})["catch"](function(resObject){setSyncState("complete"),console.error("initialSync ",resObject),reject(resObject)})})}function syncTables(tablesToSync,syncWithoutLocalUpdates,maxTableAge){var syncLock=getSyncLock(),syncState=getSyncState();if("syncing"==syncState)return void $rootScope.$emit("syncTables",{result:100498});if("true"!=syncLock){setSyncState("syncing"),"undefined"==typeof syncWithoutLocalUpdates&&(syncWithoutLocalUpdates=!0),"undefined"==typeof maxTableAge&&(maxTableAge=6e4),$rootScope.$emit("syncTables",{result:"StartSync"});var stopSyncing=!1,firstSync=!0,syncCount=0,sequence=Promise.resolve(),maxRecsPerCall=50;tablesToSync.forEach(function(table){sequence=sequence.then(function(){return syncCount++,stopSyncing?{status:"100999"}:devUtils.syncMobileTable(table,syncWithoutLocalUpdates,maxTableAge,maxRecsPerCall)}).then(function(resObject){"undefined"!=typeof resObject.status&&"100400"!=resObject.status?"100999"!=resObject.status&&("100497"==resObject.status||"100498"==resObject.status||"100402"==resObject.status||"undefined"!=typeof resObject.mc_add_status&&"sync-too-soon"==resObject.mc_add_status)&&firstSync&&(stopSyncing=!0,$rootScope.$emit("syncTables",{result:resObject.status}),setSyncState("complete")):$rootScope.$emit("syncTables",{result:"TableComplete "+table}),syncCount!=tablesToSync.length||stopSyncing||($rootScope.$emit("syncTables",{result:"Complete"}),setSyncState("complete")),firstSync=!1})["catch"](function(res){"undefined"==typeof res.status||"100497"!=res.status&&"100498"!=res.status&&"100402"!=res.status?(console.error(res),$rootScope.$emit("syncTables",{result:"Error "+JSON.stringify(res)})):$rootScope.$emit("syncTables",{result:"Complete"}),setSyncState("complete")})})}}function getSyncState(){var syncState=localStorage.getItem("syncState");return null===syncState&&(syncState="complete",localStorage.setItem("syncState",syncState)),syncState}function setSyncState(status){localStorage.setItem("syncState",status)}function getSyncLock(){var syncLock=localStorage.getItem("syncLock");return null===syncLock&&(syncLock="false",localStorage.setItem("syncLock",syncLock)),syncLock}function setSyncLock(status){localStorage.setItem("syncLock",status)}return{getSyncLock:getSyncLock,setSyncLock:setSyncLock,getSyncState:getSyncState,setSyncState:setSyncState,syncTables:syncTables,initialSync:initialSync}}angular.module("starter.services").factory("SyncService",SyncService),SyncService.$inject=["$rootScope","devUtils"]}(),function(){"use strict";function UserService(devUtils,logger){function getCurrentUserId(){return new Promise(function(resolve,reject){var currentUserId=localStorage.getItem("currentUserId");null!==currentUserId?resolve(currentUserId):devUtils.getCurrentUserId().then(function(userId){localStorage.setItem("currentUserId",userId),resolve(userId)})["catch"](function(resObject){logger.log("getCurrentUserId",resObject),reject(resObject)})})}function setCurrentUserId(userId){return new Promise(function(resolve,reject){localStorage.setItem("currentUserId",userId),resolve(!0)})}function hasDoneProcess(processName){return new Promise(function(resolve,reject){var processes=JSON.parse(localStorage.getItem("processes"));resolve(null===processes?!1:"true"==processes[processName]?!0:!1)})}function setProcessDone(processName){return new Promise(function(resolve,reject){var processes=JSON.parse(localStorage.getItem("processes"));null===processes&&(processes={}),processes[processName]="true",localStorage.setItem("processes",JSON.stringify(processes)),resolve(!0)})}function getUserFirstName(){return new Promise(function(resolve,reject){var currentUserFirstName=localStorage.getItem("currentUserFirstName");null!==currentUserFirstName?resolve(currentUserFirstName):setUserFirstName().then(function(result){resolve(result)})})}function setUserFirstName(){return new Promise(function(resolve,reject){devUtils.readRecords("appSoup",[]).then(function(resObject){var userFirstName,records=_.chain(resObject.records).filter(function(el){return"userFirstName"==el.Name?!0:!1}).value();userFirstName=records.length>0?records[0].CurrentValue:"",localStorage.setItem("currentUserFirstName",userFirstName),resolve(userFirstName)})["catch"](function(resObject){logger.error("setUserFirstName "+angular.toJson(resObject)),reject(resObject)})})}function getUserDefaultCurrency(){return new Promise(function(resolve,reject){var userDefaultCurrency=localStorage.getItem("userDefaultCurrency");null!==userDefaultCurrency?resolve(userDefaultCurrency):setUserDefaultCurrency().then(function(result){resolve(result)})})}function setUserDefaultCurrency(){return new Promise(function(resolve,reject){devUtils.readRecords("appSoup",[]).then(function(resObject){var userDefaultCurrency,records=_.chain(resObject.records).filter(function(el){return"userDefaultCurrency"==el.Name?!0:!1}).value();userDefaultCurrency=records.length>0?records[0].CurrentValue:"",localStorage.setItem("userDefaultCurrency",userDefaultCurrency),resolve(userDefaultCurrency)})["catch"](function(resObject){logger.error("setUserDefaultCurrency "+angular.toJson(resObject)),reject(resObject)})})}function getUserCurrencySymbol(){return new Promise(function(resolve,reject){getUserDefaultCurrency().then(function(result){var symbol;switch(result){case"GBP":symbol="£";break;case"USD":symbol="$";break;case"CAD":symbol="$";break;default:symbol="$"}resolve(symbol)})})}return{getCurrentUserId:getCurrentUserId,setCurrentUserId:setCurrentUserId,hasDoneProcess:hasDoneProcess,setProcessDone:setProcessDone,getUserFirstName:getUserFirstName,setUserFirstName:setUserFirstName,getUserDefaultCurrency:getUserDefaultCurrency,setUserDefaultCurrency:setUserDefaultCurrency,getUserCurrencySymbol:getUserCurrencySymbol}}angular.module("starter.services").factory("UserService",UserService),UserService.$inject=["devUtils","logger"]}();