/*! BioHub - v2.0.1 - 2016-06-07 10:09:16*/
/* Copyright 2016 MobileCaddy Ltd */
angular.module("underscore",[]).factory("_",function(){return window._}),angular.module("devUtils",[]).factory("devUtils",function(){return mobileCaddy.require("mobileCaddy/devUtils")}),angular.module("vsnUtils",[]).factory("vsnUtils",function(){return mobileCaddy.require("mobileCaddy/vsnUtils")}),angular.module("smartStoreUtils",[]).factory("smartStoreUtils",function(){return mobileCaddy.require("mobileCaddy/smartStoreUtils")}),angular.module("logger",[]).factory("logger",function(){return mobileCaddy.require("mobileCaddy/logger")}),angular.module("starter.services",["underscore","devUtils","vsnUtils","smartStoreUtils","logger"]),function(){"use strict";function AppRunStatusService($ionicPopup,$ionicLoading,devUtils,vsnUtils,SyncService,logger){function resume(){return devUtils.dirtyTables().then(function(tables){logger.log("on resume: dirtyTables check"),tables&&0===tables.length?(logger.log("on resume: calling upgradeAvailable"),vsnUtils.upgradeAvailable().then(function(res){if(logger.log("on resume: upgradeAvailable? "+res),res){var notificationTimeout=3e5,prevUpNotification=localStorage.getItem("prevUpNotification"),timeNow=Date.now();if(null===prevUpNotification&&(prevUpNotification=0),parseInt(prevUpNotification)<timeNow-notificationTimeout){var confirmPopup=$ionicPopup.confirm({title:"Upgrade available",template:"Would you like to upgrade now?",cancelText:"Not just now",okText:"Yes"});confirmPopup.then(function(res){res?($ionicLoading.show({duration:3e4,delay:400,maxWidth:600,noBackdrop:!0,template:'<h1>Upgrade app...</h1><p id="app-upgrade-msg" class="item-icon-left">Upgrading...<ion-spinner/></p>'}),localStorage.removeItem("prevUpNotification"),logger.log("on resume: calling upgradeIfAvailable"),vsnUtils.upgradeIfAvailable().then(function(res){logger.log("on resume: upgradeIfAvailable res = "+res),res||($ionicLoading.hide(),$scope.data={},$ionicPopup.show({title:"Upgrade",subTitle:"The upgrade could not take place due to sync in progress. Please try again later.",scope:$scope,buttons:[{text:"OK",type:"button-positive",onTap:function(e){return!0}}]}))})["catch"](function(e){logger.error("resume "+JSON.stringify(e)),$ionicLoading.hide()})):localStorage.setItem("prevUpNotification",timeNow)})}}})):(logger.log("on resume: dirtyTables found"),SyncService.syncTables(["DOF__ap","DOF_Item__ap","Mobile_Dynamic__ap"]))}),!0}return{statusEvent:function(status){logger.log("AppRunStatusService status "+status),"resume"==status&&resume()}}}angular.module("starter.services").factory("AppRunStatusService",AppRunStatusService),AppRunStatusService.$inject=["$ionicPopup","$ionicLoading","devUtils","vsnUtils","SyncService","logger"]}(),function(){"use strict";function ContentItemService(devUtils,logger){function getContentItems(menuItem){return new Promise(function(resolve,reject){devUtils.readRecords("Content_Item__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.Menu_Item__c==menuItem?!0:!1}).sortBy("Order__c").value();resolve(records)})["catch"](function(resObject){logger.error("getContentItems "+angular.toJson(resObject)),reject(resObject)})})}return{getContentItems:getContentItems}}angular.module("starter.services").factory("ContentItemService",ContentItemService),ContentItemService.$inject=["devUtils","logger"]}(),function(){"use strict";function DeployService($rootScope,$q,$timeout,$http){function _arrayBufferToBase64(buffer){for(var binary="",bytes=new Uint8Array(buffer),len=bytes.byteLength,i=0;len>i;i++)binary+=String.fromCharCode(bytes[i]);return window.btoa(binary)}function doesBundleExist(appConfig){return new Promise(function(resolve,reject){var dataName=appConfig.sf_app_name+"_"+appConfig.sf_app_vsn;force.request({path:"/services/data/"+apiVersion+"/tooling/query/?q=select Id, Name, Description, LastModifiedDate from StaticResource WHERE Name='"+dataName+"' LIMIT 1"},function(response){console.debug("response",response),resolve(response)},function(error){console.error("Failed to check if app bundle already existed on platform"),reject({message:"App bundle upload failed. See console for details.",type:"error"})})})}function doesPageExist(pageName){return new Promise(function(resolve,reject){force.request({path:"/services/data/"+apiVersion+"/tooling/query/?q=select Id, Name, Description, LastModifiedDate from ApexPage WHERE Name='"+pageName+"' LIMIT 1"},function(response){console.debug("response",response),resolve(response)},function(error){console.error("Failed to check if page already existed on platform"),reject({message:"Page upload failed. See console for details.",type:"error"})})})}function getDetails(){return new Promise(function(resolve,reject){$timeout(function(){$http.get("../package.json").success(function(appConfig){appConfig.sf_app_vsn=appConfig.version.replace(/\./g,""),resolve(appConfig)})["catch"](function(err){console.error(err)})},30)})}function encodeAppBundle(appConfig){return new Promise(function(resolve,reject){JSZipUtils.getBinaryContent("../"+appConfig.name+"-"+appConfig.version+".zip",function(err,data){err&&(console.error(err),reject(err));var zipFileLoaded=new JSZip(data);$rootScope.deployFiles=zipFileLoaded.files,resolve(_arrayBufferToBase64(data))})})}function uploadAppBundle(appConfig,myBody){return new Promise(function(resolve,reject){var dataName=appConfig.sf_app_name+"_"+appConfig.sf_app_vsn;doesBundleExist(appConfig).then(function(response){if(response.records.length>0){console.debug("resource exists... patching existing");var existingSR=response.records[0];force.request({method:"PATCH",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/StaticResource/"+existingSR.Id+"/",data:{Body:myBody}},function(response){console.debug("response",response),resolve("Existing app bundle updated")},function(error){console.error("Failed to check if app bundle already existed on platform"),reject({message:"App bundle upload failed. See console for details.",type:"error"})})}else force.request({method:"POST",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/StaticResource/",data:{Name:dataName,Description:"App Bundle - auto-uploaded by MobileCaddy delopyment tooling",ContentType:"application/zip",Body:myBody,CacheControl:"Public"}},function(response){console.debug("response",response),resolve("App bundle uploaded")},function(error){console.error(error),reject({message:"App bundle upload failed. See console for details.",type:"error"})})})})}function uploadCachePage(appConfig){return new Promise(function(resolve,reject){$timeout(function(){$http.get("../apex-templates/cachepage-template.apex").success(function(data){var dataName=appConfig.sf_app_name+"Cache_"+appConfig.sf_app_vsn,cacheEntriesStr="";_.each($rootScope.deployFiles,function(el){el.dir||(cacheEntriesStr+="{!URLFOR($Resource."+appConfig.sf_app_name+"_"+appConfig.sf_app_vsn+", '"+el.name+"')}\n")});var dataParsed=data.replace(/MC_UTILS_RESOURCE/g,appConfig.mc_utils_resource);dataParsed=dataParsed.replace(/MY_APP_FILE_LIST/g,cacheEntriesStr),delete $rootScope.deployFiles,doesPageExist(dataName).then(function(response){if(response.records.length>0){console.debug("page exists... patching existing");var existingPage=response.records[0];force.request({method:"PATCH",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/ApexPage/"+existingPage.Id+"/",data:{Markup:dataParsed}},function(response){resolve("Existing Cache manifest updated")},function(error){console.error(error),reject({message:"Cache manifest upload failed. See console for details.",type:"error"})})}else force.request({method:"POST",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/ApexPage/",data:{Name:dataName,MasterLabel:dataName,Markup:dataParsed}},function(response){resolve("Cache manifest uploaded")},function(error){console.error(error),reject({message:"Cache manifest upload failed. See console for details.",type:"error"})})})},30)})})}function uploadStartPage(appConfig){return new Promise(function(resolve,reject){$timeout(function(){$http.get("../apex-templates/startpage-template.apex").success(function(data){var dataName=appConfig.sf_app_name+"_"+appConfig.sf_app_vsn,dataParsed=data.replace(/MC_UTILS_RESOURCE/g,appConfig.mc_utils_resource);dataParsed=dataParsed.replace(/MY_APP_RESOURCE/g,appConfig.sf_app_name+"_"+appConfig.sf_app_vsn),dataParsed=dataParsed.replace(/MY_APP_CACHE_RESOURCE/g,appConfig.sf_app_name+"Cache_"+appConfig.sf_app_vsn),force.request({method:"POST",contentType:"application/json",path:"/services/data/"+apiVersion+"/tooling/sobjects/ApexPage/",data:{Name:dataName,ControllerType:"3",MasterLabel:dataName,Markup:dataParsed}},function(response){resolve("Start page uploaded")},function(error){console.error(error),doesPageExist(dataName).then(function(response){reject(response.records.length>0?{message:"Start page already exists. Not updated.",type:"info"}:{message:"Start page upload failed. See console for details.",type:"error"})})})})},30)})}var apiVersion="v32.0";return{getDetails:getDetails,deployBunlde:function(appConfig){return encodeAppBundle(appConfig).then(function(myBody,bundleFiles){return uploadAppBundle(appConfig,myBody)})},uploadCachePage:uploadCachePage,uploadStartPage:uploadStartPage,srDetails:function(){return encodeAppBundle().then(function(myBody){return uploadAppBundle(myBody)}).then(function(res){return uploadStartPage()})}}}angular.module("starter.services").factory("DeployService",DeployService),DeployService.$inject=["$rootScope","$q","$timeout","$http"]}(),function(){"use strict";function DevService($rootScope,$q,_,devUtils,smartStoreUtils){function getTables(){var deferred=$q.defer(),tables=[];return tables.push({Name:"syncLib_system_data"}),tables.push({Name:"appSoup"}),tables.push({Name:"cacheSoup"}),tables.push({Name:"recsToSync"}),smartStoreUtils.listMobileTables(smartStoreUtils.ALPHA,function(tableNames){return $j.each(tableNames,function(i,tableName){tables.push({Name:tableName}),smartStoreUtils.getTableDefnColumnValue(tableName,"Snapshot Data Required",function(snapshotValue){return"Yes"==snapshotValue&&tables.push({Name:"SnapShot_"+tableName}),$rootScope.$apply(function(){tables=tables}),tables},function(resObject){console.error("MC : Error from listMobileTables -> "+angular.toJson(resObject)),deferred.reject("error")})}),$rootScope.$apply(function(){deferred.resolve(tables)}),deferred.promise},function(e){console.log("MC: error from listMobileTables -> "+angular.toJson(e)),deferred.reject(e)}),deferred.promise}function isId(Val){var patt=/^[a-zA-Z0-9]{18}$/;return patt.test(Val)}function getRecords(tableName,refreshFlag){var deferred=$q.defer(),myTableRecs=[];return devUtils.readRecords(tableName,[]).then(function(resObject){console.log(tableName,resObject),$j.each(resObject.records,function(i,record){var tableRec=[];for(var fieldDef in record){var field={Name:fieldDef,Value:record[fieldDef],ID_flag:isId(record[fieldDef])};tableRec.push(field)}myTableRecs.push(tableRec)}),deferred.resolve(myTableRecs)})["catch"](function(resObject){console.error("MC : Error from devUtils.readRecords -> "+angular.toJson(resObject)),deferred.reject("error")}),deferred.promise}function getRecordForSoupEntryId(tableName,soupRecordId){return new Promise(function(resolve,reject){devUtils.readRecords(tableName,[]).then(function(resObject){var record=_.findWhere(resObject.records,{_soupEntryId:soupRecordId});resolve(record)})["catch"](function(resObject){reject(resObject)})})}function insertRecordUsingSmartStoreUtils(tableName,rec){return new Promise(function(resolve,reject){smartStoreUtils.insertRecords(tableName,[rec],function(res){resolve(res)},function(err){reject(err)})})}function insertMobileLog(recs){return new Promise(function(resolve,reject){for(var remainingData=JSON.stringify(recs),dataToInsert=[];remainingData.length>0;)dataToInsert.push(remainingData.substring(0,32767)),remainingData=remainingData.substring(32767);var sequence=Promise.resolve();dataToInsert.forEach(function(data){sequence=sequence.then(function(){var mobileLog={};return mobileLog.Name="TMP-"+(new Date).valueOf(),mobileLog.mobilecaddy1__Error_Text__c=data,mobileLog.SystemModstamp=(new Date).getTime(),insertRecordUsingSmartStoreUtils("Mobile_Log__mc",mobileLog)}).then(function(resObject){resolve(resObject)})["catch"](function(res){reject(res)})})})}return{allTables:getTables,allRecords:function(tableName,refreshFlag){var tableRecs=[];switch(refreshFlag){case!0:tableRecs=[],tableRecs=getRecords(tableName,!0);break;default:"undefined"==typeof tableRecs||tableRecs.length<1?(tableRecs=[],tableRecs=getRecords(tableName,!0)):(tableRecs=[],tableRecs=getRecords(tableName,!1))}return tableRecs},getRecordForSoupEntryId:getRecordForSoupEntryId,insertMobileLog:insertMobileLog}}angular.module("starter.services").factory("DevService",DevService),DevService.$inject=["$rootScope","$q","_","devUtils","smartStoreUtils"]}(),function(){"use strict";function LocalNotificationService($cordovaLocalNotification,$cordovaNetwork,devUtils,logger,SyncService){function cancelNotification(id){return new Promise(function(resolve,reject){id=id?id:lnDefaultId,"disabled"==getLocalNotificationState()?(logger.log("cancelNotification NotificationState disabled"),resolve()):(logger.log("cancelNotification",id),cordova&&cordova.plugins&&cordova.plugins.notification&&$cordovaLocalNotification.cancel(id).then(function(result){logger.log("localNotification cancelled if it existed",id,result),resolve(result)}))})}function setLocalNotification(id,secsTillNotify,msg){return new Promise(function(resolve,reject){"disabled"==getLocalNotificationState()?(logger.log("setLocalNotification NotificationState disabled"),resolve("ok")):(id=id?id:lnDefaultId,secsTillNotify=secsTillNotify?secsTillNotify:lnDefaultTimeout,msg=msg?msg:lnDefaultMsg,logger.log("setLocalNotification id",id,secsTillNotify,msg),devUtils.dirtyTables().then(function(tables){if(tables&&0===tables.length&&id==lnDefaultId)logger.log("setLocalNotification no dirty tables",id),resolve();else if(cordova&&cordova.plugins&&cordova.plugins.notification){var alarmTime=new Date;alarmTime.setSeconds(alarmTime.getSeconds()+secsTillNotify),logger.log("setLocalNotification alarmTime",alarmTime),$cordovaLocalNotification.isScheduled(id).then(function(isScheduled){if(logger.log("setLocalNotification isScheduled",isScheduled),isScheduled)$cordovaLocalNotification.update({id:id,at:alarmTime}).then(function(result){logger.log("localNotification updated",id,result),resolve(result)});else{var args={id:id,at:alarmTime,text:msg,sound:null};"Android"==device.platform&&(args.ongoing=!0,args.smallIcon="res://icon"),$cordovaLocalNotification.schedule(args).then(function(result){logger.log("localNotification has been set",id,result),resolve(result)})}})["catch"](function(err){logger.error("setLocalNotification",JSON.stringify(err)),reject(err)})}else logger.log("setLocalNotification no cordova plugin"),resolve()}))})}function handleLocalNotification(id,state){return new Promise(function(resolve,reject){"disabled"==getLocalNotificationState()?(logger.log("handleLocalNotification NotificationState disabled"),resolve()):(logger.log("handleLocalNotification",id,state),cordova&&cordova.plugins&&cordova.plugins.notification&&id==lnDefaultId?($cordovaLocalNotification.cancel(id,function(){}),devUtils.dirtyTables().then(function(tables){if(tables&&0!==tables.length){var isOnline=$cordovaNetwork.isOnline();logger.log("handleLocalNotification isOnline",isOnline),isOnline?(localStorage.setItem("networkStatus","online"),resolve(),SyncService.syncAllTables()):(localStorage.setItem("networkStatus","offline"),setLocalNotification(id).then(function(result){resolve(result)})["catch"](function(e){reject(e)}))}else resolve()})):resolve())})}function handleLocalNotificationClick(id,state){return new Promise(function(resolve,reject){"disabled"==getLocalNotificationState()?(logger.log("handleLocalNotification NotificationState disabled"),resolve()):(logger.log("handleLocalNotification",id,state),cordova&&cordova.plugins&&cordova.plugins.notification&&id==lnDefaultId?($cordovaLocalNotification.cancel(id,function(){}),devUtils.dirtyTables().then(function(tables){if(tables&&0!==tables.length){var isOnline=$cordovaNetwork.isOnline();logger.log("handleLocalNotification isOnline",isOnline),isOnline?(localStorage.setItem("networkStatus","online"),resolve()):(localStorage.setItem("networkStatus","offline"),setLocalNotification(id).then(function(result){resolve(result)})["catch"](function(e){reject(e)}))}else resolve()})):resolve())})}function getLocalNotificationState(){var localNotificationState=localStorage.getItem("localNotificationState");return null===localNotificationState&&(localNotificationState="enabled",localStorage.setItem("localNotificationState",localNotificationState)),localNotificationState}function setLocalNotificationState(status){localStorage.setItem("localNotificationState",status)}var lnDefaultTimeout=600,lnDefaultId=100100,lnDefaultMsg="Unsynced records";return{cancelNotification:cancelNotification,setLocalNotification:setLocalNotification,handleLocalNotification:handleLocalNotification,handleLocalNotificationClick:handleLocalNotificationClick,getLocalNotificationState:getLocalNotificationState,setLocalNotificationState:setLocalNotificationState}}angular.module("starter.services").factory("LocalNotificationService",LocalNotificationService),LocalNotificationService.$inject=["$cordovaLocalNotification","$cordovaNetwork","devUtils","logger","SyncService"]}(),function(){"use strict";function MenuService(devUtils,$window,logger){function buildAndSetSideMenuJson(){return new Promise(function(resolve,reject){buildSideMenuJson().then(function(result){setSideMenuJson(result),resolve(result)})["catch"](function(e){reject(e)})})}function getSideMenuJson(){return new Promise(function(resolve,reject){resolve(JSON.parse(localStorage.getItem("sidemenu")))})}function setSideMenuJson(sideMenuJson){localStorage.setItem("sidemenu",JSON.stringify(sideMenuJson))}function buildSideMenuJson(){var resourcePath=$window.RESOURCE_ROOT+"images/";return new Promise(function(resolve,reject){getMenuItems().then(function(records){for(var mainMenuOption,stimulanMenuOption,stimulanSubMenuOption,settingsMenuOption,settingsSubMenuOption,menuOption,menuOptionName,sideMenuJson=[],stimulanSubMenu=[],settingsSubMenu=[],i=0;i<records.length;i++)menuOption=records[i].App_Menu_Option__c,menuOptionName=records[i].Name__c,stimulanSubMenuOption=null,settingsSubMenuOption=null,mainMenuOption=null,"apps"==menuOption?stimulanSubMenuOption={id:40,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"key-ben"==menuOption?stimulanSubMenuOption={id:41,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"hip"==menuOption?stimulanSubMenuOption={id:42,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"knee"==menuOption?stimulanSubMenuOption={id:43,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"foot"==menuOption?stimulanSubMenuOption={id:44,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"trauma"==menuOption?stimulanSubMenuOption={id:45,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"faq"==menuOption?stimulanSubMenuOption={id:46,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"map"==menuOption?stimulanSubMenuOption={id:47,name:menuOptionName,node:!0,parentid:4,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"tutorial"==menuOption?settingsSubMenuOption={id:90,name:menuOptionName,node:!0,parentid:9,path:"/tutorial",submenu:[]}:"terms"==menuOption?settingsSubMenuOption={id:91,name:menuOptionName,node:!0,parentid:9,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),submenu:[]}:"mc-settings"==menuOption&&(settingsSubMenuOption={id:92,name:menuOptionName,node:!0,parentid:9,path:"/app/settings",submenu:[]}),stimulanSubMenuOption&&stimulanSubMenu.push(stimulanSubMenuOption),settingsSubMenuOption&&settingsSubMenu.push(settingsSubMenuOption),"home"==menuOption?mainMenuOption={id:1,name:menuOptionName,node:!0,parentid:0,href:"#/app/home",svg:resourcePath+"home-icon.SVG",submenu:[]}:"order-form"==menuOption?mainMenuOption={id:2,name:menuOptionName,node:!0,parentid:0,href:"#/app/orderform",svg:resourcePath+"order-form-icon.SVG",submenu:[]}:"un-req"==menuOption?mainMenuOption={id:3,name:menuOptionName,node:!0,parentid:0,href:"#/app/request",svg:resourcePath+"unsolicited-request-icon.SVG",submenu:[]}:"stimulan"==menuOption?(mainMenuOption={id:4,name:menuOptionName,node:!1,parentid:0,href:"#/app/home",svg:resourcePath+"stimulan-icon.SVG",submenu:[]},stimulanMenuOption=mainMenuOption):"bio"==menuOption?mainMenuOption={id:5,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"biocomposites-icon.SVG",submenu:[]}:"toi"==menuOption?mainMenuOption={id:6,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"topics-of-interest-icon.SVG",submenu:[]}:"e-learn"==menuOption?mainMenuOption={id:7,name:menuOptionName,node:!0,parentid:0,path:"/app/contentitem/"+menuOption+"/"+encodeURIComponent(menuOptionName),svg:resourcePath+"e-learning-icon.SVG",submenu:[]}:"l-cap"==menuOption?mainMenuOption={id:8,name:menuOptionName,node:!0,parentid:0,href:"#/app/leadcapture",svg:resourcePath+"lead-capture-icon.SVG",submenu:[]}:"settings"==menuOption?(mainMenuOption={id:9,name:menuOptionName,node:!1,parentid:0,href:"#/app/home",svg:resourcePath+"settings-icon.SVG",submenu:[]},settingsMenuOption=mainMenuOption):"outbox"==menuOption?mainMenuOption={id:10,name:menuOptionName,node:!0,parentid:0,href:"#/app/outbox",svg:resourcePath+"outbox-icon.SVG",submenu:[]}:"sync"==menuOption&&(mainMenuOption={id:11,name:menuOptionName,node:!0,parentid:0,click:"vm.doRefreshAndSync()",svg:resourcePath+"sync-icon.SVG",submenu:[]}),mainMenuOption&&sideMenuJson.push(mainMenuOption);for(var x=0,len=sideMenuJson.length;len>x;x++)4===sideMenuJson[x].id&&(sideMenuJson[x].submenu=stimulanSubMenu),9===sideMenuJson[x].id&&(sideMenuJson[x].submenu=settingsSubMenu);resolve([sideMenuJson,stimulanMenuOption,settingsMenuOption])})["catch"](function(e){reject(e)})})}function getMenuItems(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Profile Menu Item"==el.RecordType_Name__c?!0:!1}).sortBy("Order__c").value();resolve(records)})["catch"](function(resObject){logger.error("getMenuItems "+angular.toJson(resObject)),reject(resObject)})})}return{getSideMenuJson:getSideMenuJson,buildAndSetSideMenuJson:buildAndSetSideMenuJson,setSideMenuJson:setSideMenuJson}}angular.module("starter.services").factory("MenuService",MenuService),MenuService.$inject=["devUtils","$window","logger"]}(),function(){"use strict";function MobileDynamicService(devUtils,logger){function insertRecord(record){return new Promise(function(resolve,reject){devUtils.insertRecord("Mobile_Dynamic__ap",record).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("insertRecord "+angular.toJson(resObject)),reject(resObject)})})}function getRecords(recordTypeId){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Dynamic__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.RecordTypeId==recordTypeId?!0:!1}).sortBy(function(e){return-e.Date_Entered__c}).value();resolve(records)})["catch"](function(resObject){logger.error("getRecords "+angular.toJson(resObject)),reject(resObject)})})}return{insertRecord:insertRecord,getRecords:getRecords}}angular.module("starter.services").factory("MobileDynamicService",MobileDynamicService),MobileDynamicService.$inject=["devUtils","logger"]}(),function(){"use strict";function NetworkService(SyncService,logger){return{networkEvent:function(status){localStorage.getItem("networkStatus");return localStorage.setItem("networkStatus",status),logger.log("NetworkService "+status),!0},getNetworkStatus:function(){return localStorage.getItem("networkStatus")},setNetworkStatus:function(status){localStorage.setItem("networkStatus",status)}}}angular.module("starter.services").factory("NetworkService",NetworkService),NetworkService.$inject=["SyncService","logger"]}(),function(){"use strict";function OrderFormService(devUtils,logger){function getProducts(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Product"==el.RecordType_Name__c?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getProducts "+angular.toJson(resObject)),reject(resObject)})})}function getHospitals(){return new Promise(function(resolve,reject){devUtils.readRecords("Surgeon_in_Hospital__ap",[]).then(function(resObject){var records=_.chain(resObject.records).uniq("Hospital_Name__c").sortBy("Hospital_Name__c").value();resolve(records)})["catch"](function(resObject){logger.error("getHospitals "+angular.toJson(resObject)),reject(resObject)})})}function getSurgeons(){return new Promise(function(resolve,reject){devUtils.readRecords("Surgeon_in_Hospital__ap",[]).then(function(resObject){var records=_.chain(resObject.records).uniq(function(el){return el.Last_Name__c+el.First_Name__c}).sortBy("First_Name__c").sortBy("Last_Name__c").value();resolve(records)})["catch"](function(resObject){logger.error("getSurgeons "+angular.toJson(resObject)),reject(resObject)})})}function insertOrderForm(record){return new Promise(function(resolve,reject){devUtils.insertRecord("DOF__ap",record).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("insertOrderForm "+angular.toJson(resObject)),reject(resObject)})})}function insertOrderFormItems(records){return new Promise(function(resolve,reject){devUtils.insertRecords("DOF_Item__ap",records).then(function(resObject){resolve(resObject)})["catch"](function(resObject){logger.error("insertOrderFormItems "+angular.toJson(resObject)),reject(resObject)})})}function getOrders(){return new Promise(function(resolve,reject){devUtils.readRecords("DOF__ap",[]).then(function(resObject){var records=_.chain(resObject.records).sortBy(function(e){return-e.Date_Entered__c}).value();resolve(records)})["catch"](function(resObject){logger.error("getOrders "+angular.toJson(resObject)),reject(resObject)})})}function getOrderItems(){return new Promise(function(resolve,reject){devUtils.readRecords("DOF_Item__ap",[]).then(function(resObject){var records=_.chain(resObject.records).value();resolve(records)})["catch"](function(resObject){logger.error("getOrderItems "+angular.toJson(resObject)),reject(resObject)})})}function getSurgeonInHospital(surgeonId){return new Promise(function(resolve,reject){devUtils.readRecords("Surgeon_in_Hospital__ap",[]).then(function(resObject){var record=_.findWhere(resObject.records,{Surgeon__c:surgeonId});resolve(record)})["catch"](function(resObject){reject(resObject)})})}function getOrderItemsWithOrderId(orderId){return new Promise(function(resolve,reject){devUtils.readRecords("DOF_Item__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return el.DOF__c==orderId?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getOrderItems "+angular.toJson(resObject)),reject(resObject)})})}function getProductsForOrderItems(orderItems){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){for(var products=_.chain(resObject.records).filter(function(el){return"Product"==el.RecordType_Name__c?!0:!1}).value(),records=[],j=0;j<orderItems.length;j++)for(var k=0;k<products.length;k++)if(products[k].Id==orderItems[j].Product__c){records.push(products[k]);break}resolve(records)})["catch"](function(resObject){logger.error("getProductsForOrderItems "+angular.toJson(resObject)),reject(resObject)})})}return{getProducts:getProducts,getHospitals:getHospitals,getSurgeons:getSurgeons,insertOrderForm:insertOrderForm,insertOrderFormItems:insertOrderFormItems,getOrders:getOrders,getOrderItems:getOrderItems,getSurgeonInHospital:getSurgeonInHospital,getOrderItemsWithOrderId:getOrderItemsWithOrderId,getProductsForOrderItems:getProductsForOrderItems}}angular.module("starter.services").factory("OrderFormService",OrderFormService),OrderFormService.$inject=["devUtils","logger"]}(),function(){"use strict";function OutboxService(devUtils,logger){function getDirtyRecordsCount(){return new Promise(function(resolve,reject){getDirtyRecords().then(function(resObject){resolve(resObject.length)})["catch"](function(resObject){logger.error("getDirtyRecordsCount "+angular.toJson(resObject)),reject(resObject)})})}function getDirtyRecords(){return new Promise(function(resolve,reject){devUtils.readRecords("recsToSync",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"DOF__ap"==el.Mobile_Table_Name||"Mobile_Dynamic__ap"==el.Mobile_Table_Name?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getDirtyRecords "+angular.toJson(resObject)),reject(resObject)})})}function getRecordForSoupEntryId(tableName,soupRecordId){return new Promise(function(resolve,reject){devUtils.readRecords(tableName,[]).then(function(resObject){var record=_.findWhere(resObject.records,{_soupEntryId:soupRecordId});resolve(record)})["catch"](function(resObject){reject(resObject)})})}return{getDirtyRecordsCount:getDirtyRecordsCount,getDirtyRecords:getDirtyRecords,getRecordForSoupEntryId:getRecordForSoupEntryId}}angular.module("starter.services").factory("OutboxService",OutboxService),OutboxService.$inject=["devUtils","logger"]}(),function(){"use strict";function RecentItemsService(){function getRecentItems(type){return new Promise(function(resolve,reject){var recentItems=JSON.parse(localStorage.getItem(type));resolve(null===recentItems?[]:recentItems)})}function setRecentItems(type,recentItems){return new Promise(function(resolve,reject){localStorage.setItem(type,JSON.stringify(recentItems)),resolve()})}function addRecentItem(type,recentItem){return new Promise(function(resolve,reject){var recentItems=JSON.parse(localStorage.getItem(type));null===recentItems&&(recentItems=[]);for(var itemFound=!1,i=0;i<recentItems.length;i++)recentItem.id&&recentItem.id===recentItems[i].id&&(itemFound=!0);itemFound||recentItems.unshift(recentItem),localStorage.setItem(type,JSON.stringify(recentItems)),resolve(recentItems)})}return{getRecentItems:getRecentItems,setRecentItems:setRecentItems,addRecentItem:addRecentItem}}angular.module("starter.services").factory("RecentItemsService",RecentItemsService)}(),function(){"use strict";function RecordTypeService(devUtils,logger){function readAndSetRecordTypes(){return new Promise(function(resolve,reject){readRecordTypes().then(function(result){setRecordTypes(result),resolve(result)})["catch"](function(e){reject(e)})})}function getRecordTypeId(recordTypeName,recordTypeObject){return new Promise(function(resolve,reject){var recordTypes=JSON.parse(localStorage.getItem("recordtypes"));if(null===recordTypes)resolve("");else{for(var recordTypeId,i=0;i<recordTypes.length;i++)recordTypes[i].name==recordTypeName&&recordTypes[i].object==recordTypeObject&&(recordTypeId=recordTypes[i].id);
resolve(recordTypeId)}})}function setRecordTypes(recordTypes){localStorage.setItem("recordtypes",JSON.stringify(recordTypes))}function readRecordTypes(){return new Promise(function(resolve,reject){getRecordTypes().then(function(records){for(var recordTypes=[],i=0;i<records.length;i++)recordTypes.push({name:records[i].Name__c,id:records[i].Record_Type_ID__c,object:records[i].Object_Reference__c});logger.log("recordTypes.length: "+recordTypes.length),resolve(recordTypes)})["catch"](function(e){reject(e)})})}function getRecordTypes(){return new Promise(function(resolve,reject){devUtils.readRecords("Mobile_Refresh__ap",[]).then(function(resObject){var records=_.chain(resObject.records).filter(function(el){return"Record Type Reference"==el.RecordType_Name__c?!0:!1}).value();resolve(records)})["catch"](function(resObject){logger.error("getRecordTypes "+angular.toJson(resObject)),reject(resObject)})})}return{getRecordTypeId:getRecordTypeId,readAndSetRecordTypes:readAndSetRecordTypes}}angular.module("starter.services").factory("RecordTypeService",RecordTypeService),RecordTypeService.$inject=["devUtils","logger"]}(),function(){"use strict";function SyncService($rootScope,devUtils){function initialSync(tablesToSync){return new Promise(function(resolve,reject){setSyncState("syncing"),devUtils.initialSync(tablesToSync).then(function(res){setSyncState("complete"),$rootScope.$emit("syncTables",{result:"InitialLoadComplete"}),resolve()})["catch"](function(resObject){setSyncState("complete"),console.error("initialSync ",resObject),reject(resObject)})})}function syncTables(tablesToSync,syncWithoutLocalUpdates,maxTableAge){var syncLock=getSyncLock(),syncState=getSyncState();if("syncing"==syncState)return void $rootScope.$emit("syncTables",{result:100498});if("true"!=syncLock){setSyncState("syncing"),"undefined"==typeof syncWithoutLocalUpdates&&(syncWithoutLocalUpdates=!0),"undefined"==typeof maxTableAge&&(maxTableAge=6e4),$rootScope.$emit("syncTables",{result:"StartSync"});var stopSyncing=!1,firstSync=!0,syncCount=0,sequence=Promise.resolve(),maxRecsPerCall=50;tablesToSync.forEach(function(table){sequence=sequence.then(function(){return syncCount++,stopSyncing?{status:"100999"}:devUtils.syncMobileTable(table,syncWithoutLocalUpdates,maxTableAge,maxRecsPerCall)}).then(function(resObject){"undefined"!=typeof resObject.status&&"100400"!=resObject.status?"100999"!=resObject.status&&("100497"==resObject.status||"100498"==resObject.status||"100402"==resObject.status||"undefined"!=typeof resObject.mc_add_status&&"sync-too-soon"==resObject.mc_add_status)&&firstSync&&(stopSyncing=!0,$rootScope.$emit("syncTables",{result:resObject.status}),setSyncState("complete")):$rootScope.$emit("syncTables",{result:"TableComplete "+table}),syncCount!=tablesToSync.length||stopSyncing||($rootScope.$emit("syncTables",{result:"Complete"}),setSyncState("complete")),firstSync=!1})["catch"](function(res){"undefined"==typeof res.status||"100497"!=res.status&&"100498"!=res.status&&"100402"!=res.status?(console.error(res),$rootScope.$emit("syncTables",{result:"Error "+JSON.stringify(res)})):$rootScope.$emit("syncTables",{result:"Complete"}),setSyncState("complete")})})}}function getSyncState(){var syncState=localStorage.getItem("syncState");return null===syncState&&(syncState="complete",localStorage.setItem("syncState",syncState)),syncState}function setSyncState(status){localStorage.setItem("syncState",status)}function getSyncLock(){var syncLock=localStorage.getItem("syncLock");return null===syncLock&&(syncLock="false",localStorage.setItem("syncLock",syncLock)),syncLock}function setSyncLock(status){localStorage.setItem("syncLock",status)}return{getSyncLock:getSyncLock,setSyncLock:setSyncLock,getSyncState:getSyncState,setSyncState:setSyncState,syncTables:syncTables,initialSync:initialSync}}angular.module("starter.services").factory("SyncService",SyncService),SyncService.$inject=["$rootScope","devUtils"]}(),function(){"use strict";function UserService(devUtils,logger){function getCurrentUserId(){return new Promise(function(resolve,reject){var currentUserId=localStorage.getItem("currentUserId");null!==currentUserId?resolve(currentUserId):devUtils.getCurrentUserId().then(function(userId){localStorage.setItem("currentUserId",userId),resolve(userId)})["catch"](function(resObject){logger.log("getCurrentUserId",resObject),reject(resObject)})})}function setCurrentUserId(userId){return new Promise(function(resolve,reject){localStorage.setItem("currentUserId",userId),resolve(!0)})}function hasDoneProcess(processName){return new Promise(function(resolve,reject){var processes=JSON.parse(localStorage.getItem("processes"));resolve(null===processes?!1:"true"==processes[processName]?!0:!1)})}function setProcessDone(processName){return new Promise(function(resolve,reject){var processes=JSON.parse(localStorage.getItem("processes"));null===processes&&(processes={}),processes[processName]="true",localStorage.setItem("processes",JSON.stringify(processes)),resolve(!0)})}function getUserFirstName(){return new Promise(function(resolve,reject){var currentUserFirstName=localStorage.getItem("currentUserFirstName");null!==currentUserFirstName?resolve(currentUserFirstName):setUserFirstName().then(function(result){resolve(result)})})}function setUserFirstName(){return new Promise(function(resolve,reject){devUtils.readRecords("appSoup",[]).then(function(resObject){var userFirstName,records=_.chain(resObject.records).filter(function(el){return"userFirstName"==el.Name?!0:!1}).value();userFirstName=records.length>0?records[0].CurrentValue:"",localStorage.setItem("currentUserFirstName",userFirstName),resolve(userFirstName)})["catch"](function(resObject){logger.error("setUserFirstName "+angular.toJson(resObject)),reject(resObject)})})}function getUserDefaultCurrency(){return new Promise(function(resolve,reject){var userDefaultCurrency=localStorage.getItem("userDefaultCurrency");null!==userDefaultCurrency?resolve(userDefaultCurrency):setUserDefaultCurrency().then(function(result){resolve(result)})})}function setUserDefaultCurrency(){return new Promise(function(resolve,reject){devUtils.readRecords("appSoup",[]).then(function(resObject){var userDefaultCurrency,records=_.chain(resObject.records).filter(function(el){return"userDefaultCurrency"==el.Name?!0:!1}).value();userDefaultCurrency=records.length>0?records[0].CurrentValue:"",localStorage.setItem("userDefaultCurrency",userDefaultCurrency),resolve(userDefaultCurrency)})["catch"](function(resObject){logger.error("setUserDefaultCurrency "+angular.toJson(resObject)),reject(resObject)})})}function getUserCurrencySymbol(){return new Promise(function(resolve,reject){getUserDefaultCurrency().then(function(result){var symbol;switch(result){case"GBP":symbol="£";break;case"USD":symbol="$";break;case"CAD":symbol="$";break;default:symbol="$"}resolve(symbol)})})}return{getCurrentUserId:getCurrentUserId,setCurrentUserId:setCurrentUserId,hasDoneProcess:hasDoneProcess,setProcessDone:setProcessDone,getUserFirstName:getUserFirstName,setUserFirstName:setUserFirstName,getUserDefaultCurrency:getUserDefaultCurrency,setUserDefaultCurrency:setUserDefaultCurrency,getUserCurrencySymbol:getUserCurrencySymbol}}angular.module("starter.services").factory("UserService",UserService),UserService.$inject=["devUtils","logger"]}();